---
- hosts: localhost
  gather_facts: no
  collections:
    - netapp.ontap
  vars:
    env: "{{ env }}"
    hostname: "{{ hostname }}"
    username: "{{ username }}"
    password: "{{ password }}"
    https: "{{ https }}"
    validate_certs: "{{ certs }}"
  tasks:
  - name: include variables
    include_vars: "{{ env|upper }}.yml"

  - name: Gather north volume facts
    na_ontap_info:
      #gather_subset: volume_info
      gather_subset: volume_info,snapmirror_info
      hostname: "{{ north.cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
    register: north_info

  - name: Gather south volume facts
    na_ontap_info:
      #gather_subset: volume_info
      gather_subset: volume_info,snapmirror_info
      hostname: "{{ south.cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
    register: south_info

  - set_fact:
      sm_list: "{{ sm_list|default([]) + [{ \
                  'dst_cluster':south.cluster,'src_cluster':north.cluster,\
                  'dst_svm':item.svm,'dst_volume':item.volume,\
                  'src_svm':south_info.ontap_info.snapmirror_info[':'.join([item.svm,item.volume])].source_vserver,\
                  'src_volume':south_info.ontap_info.snapmirror_info[':'.join([item.svm,item.volume])].source_volume,\
                  'type':south_info.ontap_info.snapmirror_info[':'.join([item.svm,item.volume])].relationship_type,\
                  'policy':south_info.ontap_info.snapmirror_info[':'.join([item.svm,item.volume])].policy,\
                  'schedule':south_info.ontap_info.snapmirror_info[':'.join([item.svm,item.volume])].schedule\
                  }] }}"
    with_items: "{{ south.volume_list }}"
    when:
      - south_info.ontap_info.volume_info[item.volume+":"+item.svm].volume_id_attributes.type == "dp"

  - set_fact:
      #dst: "{{ dst|default([])+[{'cluster':north.cluster,'svm':item.svm,'volume':item.volume}] }}"
      sm_list: "{{ sm_list|default([]) + [{ \
                  'dst_cluster':north.cluster,'src_cluster':south.cluster,\
                  'dst_svm':item.svm,'dst_volume':item.volume,\
                  'src_svm':north_info.ontap_info.snapmirror_info[':'.join([item.svm,item.volume])].source_vserver,\
                  'src_volume':north_info.ontap_info.snapmirror_info[':'.join([item.svm,item.volume])].source_volume,\
                  'type':north_info.ontap_info.snapmirror_info[':'.join([item.svm,item.volume])].relationship_type,\
                  'policy':north_info.ontap_info.snapmirror_info[':'.join([item.svm,item.volume])].policy,\
                  'schedule':north_info.ontap_info.snapmirror_info[':'.join([item.svm,item.volume])].schedule\
                  }] }}"
    with_items: "{{ north.volume_list }}"
    when:
      - north_info.ontap_info.volume_info[item.volume+":"+item.svm].volume_id_attributes.type == "dp"

  - debug:
      msg: "volume{{ my_idx|int +1 }} - {{ item.src_svm }}:{{ item.src_volume }} ---> {{ item.dst_svm }}:{{ item.dst_volume }}"
    with_items: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_cluster }} ---> {{ item.dst_cluster }}"
      index_var: my_idx

  - name: Update Snapmirror
    na_ontap_snapmirror:
      state: present
      update: true
      source_path: "{{ item.src_svm }}:{{ item.src_volume }}"
      destination_path: "{{ item.dst_svm }}:{{ item.dst_volume }}"
      hostname: "{{ item.dst_cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
    loop: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_svm }}:{{ item.src_volume }} ---> {{ item.dst_svm }}:{{ item.dst_volume }} --- updating"

  - name: Check Snapmirror State
    na_ontap_info:
      gather_subset: snapmirror_info
      hostname: "{{ item.dst_cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
    register: sm_status
    until: sm_status.ontap_info.snapmirror_info[item.dst_svm+":"+item.dst_volume].relationship_status == "idle"
    delay: 10
    retries: 60
    loop: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_svm }}:{{ item.src_volume }} ---> {{ item.dst_svm }}:{{ item.dst_volume }}  --- Idle"

  - name: Quiesce Snapmirror Relationship
    na_ontap_command:
      hostname: "{{ item.dst_cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
      command: "snapmirror quiesce -destination-path {{ item.dst_svm }}:{{ item.dst_volume }}"
      include_lines: '{{ item.dst_svm }}:{{ item.dst_volume }}'
      return_dict: true
    register: result
    until: result.msg.stdout_lines_filter | reject('search','^Operation succeeded:') | list | count == 0
    delay: 10
    retries: 60
    loop: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_svm }}:{{ item.src_volume }} ---> {{ item.dst_svm }}:{{ item.dst_volume }}  --- quiescing"

  - name: Check Snapmirror Quiesced State
    na_ontap_info:
      gather_subset: snapmirror_info
      hostname: "{{ item.dst_cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
    register: sm_status
    until: sm_status.ontap_info.snapmirror_info[item.dst_svm+":"+item.dst_volume].relationship_status == "quiesced"
    delay: 10
    retries: 60
    loop: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_svm }}:{{ item.src_volume }} ---> {{ item.dst_svm }}:{{ item.dst_volume }}  --- Quiesced"

  - name: Break Snapmirror Relationship
    na_ontap_snapmirror:
      hostname: "{{ item.dst_cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
      state: present
      relationship_state: broken
      source_path: "{{ item.src_svm }}:{{ item.src_volume }}"
      destination_path: "{{ item.dst_svm }}:{{ item.dst_volume }}"
    loop: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_svm }}:{{ item.src_volume }} ---> {{ item.dst_svm }}:{{ item.dst_volume }}  --- breaking"

  - name: Check Snapmirror Break State
    na_ontap_info:
      gather_subset: snapmirror_info
      hostname: "{{ item.dst_cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
    register: sm_status
    until: sm_status.ontap_info.snapmirror_info[item.dst_svm+":"+item.dst_volume].mirror_state == "broken-off"
    delay: 10
    retries: 60
    loop: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_svm }}:{{ item.src_volume }} -x-> {{ item.dst_svm }}:{{ item.dst_volume }}  --- Broken-off"

  - name: Delete Snapmirror Relationship
    na_ontap_snapmirror:
      hostname: "{{ item.dst_cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
      source_hostname: "{{ item.src_cluster }}"
      state: absent
      relationship_info_only: true
      destination_path: "{{ item.dst_svm }}:{{ item.dst_volume }}"
      source_path: "{{ item.src_svm }}:{{ item.src_volume }}"
    loop: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_svm }}:{{ item.src_volume }} -x-> {{ item.dst_svm }}:{{ item.dst_volume }}  --- deleting"

  - name: Create Snapmirror Reverse Relationship
    na_ontap_snapmirror:
      hostname: "{{ item.src_cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
      state: present
      initialize: False
      source_path: "{{ item.dst_svm }}:{{ item.dst_volume }}"
      destination_path: "{{ item.src_svm }}:{{ item.src_volume }}"
      schedule: "{{ item.schedule }}"
      policy: "{{ item.policy }}"
      relationship_type: "{{ item.type }}"
    loop: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_svm }}:{{ item.src_volume }} <-x- {{ item.dst_svm }}:{{ item.dst_volume }}  --- reversing"

  - name: Check Snapmirror Reverse State
    na_ontap_info:
      gather_subset: snapmirror_info
      hostname: "{{ item.src_cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
    register: sm_status
    until: sm_status.ontap_info.snapmirror_info[item.src_svm+":"+item.src_volume].mirror_state == "broken-off"
    delay: 10
    retries: 60
    loop: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_svm }}:{{ item.src_volume }} <-x- {{ item.dst_svm }}:{{ item.dst_volume }}  --- Broken-off"

  - name: Resync Snapmirror Reverse Relationship
    na_ontap_snapmirror:
      hostname: "{{ item.src_cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
      state: present
      relationship_state: active
      source_path: "{{ item.dst_svm }}:{{ item.dst_volume }}"
      destination_path: "{{ item.src_svm }}:{{ item.src_volume }}"
    loop: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_svm }}:{{ item.src_volume }} <--- {{ item.dst_svm }}:{{ item.dst_volume }}  --- resyncing"

  - name: Check Snapmirror Reverse State
    na_ontap_info:
      gather_subset: snapmirror_info
      hostname: "{{ item.src_cluster }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
    register: sm_status
    until: sm_status.ontap_info.snapmirror_info[item.src_svm+":"+item.src_volume].relationship_status == "idle"
    delay: 30
    retries: 240
    loop: "{{ sm_list }}"
    loop_control:
      label: "{{ item.src_svm }}:{{ item.src_volume }} <--- {{ item.dst_svm }}:{{ item.dst_volume }}  --- idle"


